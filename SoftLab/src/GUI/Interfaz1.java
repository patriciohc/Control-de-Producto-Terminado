/*
 * Interfaz1.java
 * This file is part of products-control-Prosid
 *
 * Copyright (C) 2015 J.Patricio Hijuitl
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */


package GUI;

import com.lowagie.text.pdf.PdfReader;
import com.softlab.liblab.DataBase.*;
import com.softlab.liblab.tools.*;
import com.softlab.liblab.reports.*;
import java.awt.Event;
import java.awt.event.*;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.JTextComponent;
import net.sf.jasperreports.engine.JasperPrint;

public class Interfaz1 extends javax.swing.JFrame {

    private LaboratorioDB laboratorio;
    //private GenReportes genReportes;
    private FrameDatos frDatos;
    
    private final Tabla dtmRegistro = new TablaRegistro(
            new Object [][] {},
            new String []{
                "No Analisis", "Lote", "Cantidad","Cliente/Proveedor","Producto","Certificado"
            } );

    private final TablaAnalisis dtmAnalisis1 = new TablaAnalisis(new Object [][] {}, 
            new String []{"Parametro", "Resultado"});
    private final Tabla dtmEmbarques1 = new Tabla();
    
    private final Tabla dtmGrupos = new Tabla(
            new Object [][] {},
            new String []{"Nombre", "Incluir(s/n)"} );
    
    
    private DefaultComboBoxModel itemsAgregar;

    private JTextComponent cmbTxt;
    private Fecha fecha;
    private javax.swing.JFrame thiss = this;
    private JPopupMenu popup = new JPopupMenu();
    private Session m_s;
    private ProductList prods;
    private FrameAnalisisTipicos frAnalisisTipicos;
    /** Creates new form Interfaz1 */
    
    public Interfaz1(Session m_s) 
    {
        try {
            this.m_s = m_s;
            laboratorio = new LaboratorioDB(m_s);
            loadProds();
            setVisible(true);
            initComponents();
            frDatos = new FrameDatos(this,prods,m_s.getConnection());
            frAnalisisTipicos =  new FrameAnalisisTipicos(m_s.getConnection());
            reInitComponents();
            //laboratorio.actTablas(prods.getProducto("ESPUMAG G"));
        } catch(SQLException e){}
        //genReportes = new GenReportes();
    }
    
    private void loadProds() throws SQLException
    {
       prods = new ProductList();
       prods.load(m_s.getConnection());        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        btAnalisisAtras = new javax.swing.JButton();
        btAnalisisAdelante = new javax.swing.JButton();
        javax.swing.JLabel jLabel22 = new javax.swing.JLabel();
        txtAnalisisBuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbEntrada1 = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        txtBusquedaNombre = new javax.swing.JTextField();
        btGuardar = new javax.swing.JButton();
        btCertificado = new javax.swing.JButton();
        btReportes = new javax.swing.JButton();
        cmbEntradaAgregar = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        txtRegistroFilas = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lbFecha = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        txtEmbarquesCantidad = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbEmbarques = new javax.swing.JTable();
        javax.swing.JLabel jLabel23 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel24 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel25 = new javax.swing.JLabel();
        txtFilas = new javax.swing.JTextField();
        cmbEmbarquesClienteB = new javax.swing.JComboBox();
        cmbEmbarquesProductoB = new javax.swing.JComboBox();
        cmbEmbarquesCliente = new javax.swing.JComboBox();
        cmbEmbarquesProducto = new javax.swing.JComboBox();
        btEmbarquesOk = new javax.swing.JButton();
        btGuardarEmbarque = new javax.swing.JButton();
        btEmbCertificados = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtEmbFecha = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        txtPanel3Nombre = new javax.swing.JTextField();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        txtPanel3Prov = new javax.swing.JTextField();
        cmbPanel3Tipo = new javax.swing.JComboBox();
        btPanel3CrearGrupo = new javax.swing.JButton();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        btPanel3NuevoProducto = new javax.swing.JButton();
        btPanel3AnalisisTipicos = new javax.swing.JButton();
        ScrollPanel3 = new javax.swing.JScrollPane();
        tbGrupos = new javax.swing.JTable();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        txtPanel3Cad = new javax.swing.JTextField();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        cmbPanel3Prods = new javax.swing.JComboBox();
        btPanel3Actualizar = new javax.swing.JButton();
        btPanel3Eliminar = new javax.swing.JButton();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        txtPanel3Jasper = new javax.swing.JTextField();
        javax.swing.JLabel jLabel15 = new javax.swing.JLabel();
        cmbPanel3Clientes = new javax.swing.JComboBox();
        btPanel3EditarCliente = new javax.swing.JButton();
        btPanel3EliminarCliente = new javax.swing.JButton();
        btPanel3NuevoCliente = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        panelLogo = new PanelImg("/home/ubuntu/softlab/SofLab1.2/image/logo.png");
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Laboratorio - PROSID");

        jLabel3.setText("Agregar nuevo analisis");

        btAnalisisAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/PNG/onebit_29.png"))); // NOI18N
        btAnalisisAtras.setText("Atras");

        btAnalisisAdelante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/PNG/onebit_27.png"))); // NOI18N
        btAnalisisAdelante.setText("Adelante");

        jLabel22.setText("por fecha");

        jScrollPane1.setViewportView(tbEntrada1);

        jLabel16.setText("buscar analisis");

        jLabel27.setText("por nombre");

        btGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/PNG/onebit_11.png"))); // NOI18N
        btGuardar.setText("Guardar");

        btCertificado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/PNG/onebit_39.png"))); // NOI18N
        btCertificado.setText("Certificado");

        btReportes.setText("Reporte Mensual");

        cmbEntradaAgregar.setEditable(true);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        txtRegistroFilas.setText("200");

        jLabel2.setText("en los ultimos");

        lbFecha.setText("jLabel14");

        jLabel14.setText("registros");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbEntradaAgregar, 0, 286, Short.MAX_VALUE)
                            .addComponent(lbFecha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAnalisisBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtBusquedaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtRegistroFilas, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btAnalisisAtras, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btAnalisisAdelante, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btCertificado, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btReportes, javax.swing.GroupLayout.PREFERRED_SIZE, 124, Short.MAX_VALUE)))
                        .addGap(14, 14, 14))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbEntradaAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbFecha))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(txtBusquedaNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txtRegistroFilas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel22)
                                .addComponent(txtAnalisisBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btCertificado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btAnalisisAdelante, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btAnalisisAtras, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btReportes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Entrada", jPanel1);

        jLabel10.setText("Cliente");

        jLabel12.setText("Producto");

        jLabel13.setText("Cantidad");

        tbEmbarques.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(tbEmbarques);

        jLabel23.setText("Filas");

        jLabel24.setText("Cliente");

        jLabel25.setText("Producto");

        txtFilas.setText("50");

        btEmbarquesOk.setText("Nuevo embarque");

        btGuardarEmbarque.setText("Guardad Seleccion");

        btEmbCertificados.setText("Certificados");

        jLabel1.setText("Fecha ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane6)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilas, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbEmbarquesClienteB, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbEmbarquesProductoB, 0, 211, Short.MAX_VALUE)
                        .addGap(265, 265, 265))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbEmbarquesCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbEmbarquesProducto, 0, 169, Short.MAX_VALUE)
                            .addComponent(txtEmbarquesCantidad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btEmbarquesOk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btGuardarEmbarque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btEmbCertificados, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmbFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbEmbarquesCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(btEmbarquesOk)
                    .addComponent(jLabel1)
                    .addComponent(txtEmbFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtEmbarquesCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEmbCertificados))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cmbEmbarquesProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btGuardarEmbarque))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txtFilas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(cmbEmbarquesClienteB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(cmbEmbarquesProductoB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Embarques", jPanel3);

        jLabel4.setText("Nombre Nuevo Producto");

        jLabel5.setText("Tipo");

        cmbPanel3Tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PRODUCTO TERMINADO", "MATERIA PRIMA", "ESPECIAL" }));

        btPanel3CrearGrupo.setText("Crear nuevo grupo de analisis");

        jLabel7.setText("Incluir los siguientes grupos de analisis:");

        btPanel3NuevoProducto.setText("Crear nuevo producto");

        btPanel3AnalisisTipicos.setText("Analisis tipicos");

        tbGrupos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ScrollPanel3.setViewportView(tbGrupos);

        jLabel8.setText("Caducidad (cantidad de meses)");

        jLabel6.setText("Producto Existente");

        cmbPanel3Prods.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btPanel3Actualizar.setText("Actualizar producto");

        btPanel3Eliminar.setText("Eliminar producto");

        jLabel9.setText("Cliente Proveedor");

        jLabel11.setText("Archivo Jasper");

        jLabel15.setText("Clientes");

        cmbPanel3Clientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btPanel3EditarCliente.setText("Editar");

        btPanel3EliminarCliente.setText("Eliminar");

        btPanel3NuevoCliente.setText("Agregar un nuevo cliente");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btPanel3NuevoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ScrollPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPanel3Nombre)
                            .addComponent(cmbPanel3Prods, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPanel3Tipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPanel3Prov)
                            .addComponent(txtPanel3Cad)
                            .addComponent(txtPanel3Jasper)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbPanel3Clientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btPanel3EditarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btPanel3EliminarCliente)
                        .addGap(4, 4, 4)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btPanel3NuevoProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                    .addComponent(btPanel3Actualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btPanel3Eliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btPanel3AnalisisTipicos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btPanel3CrearGrupo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(148, 148, 148))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPanel3Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btPanel3NuevoProducto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cmbPanel3Prods, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btPanel3Actualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbPanel3Tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btPanel3Eliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPanel3Prov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btPanel3AnalisisTipicos))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPanel3Cad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(btPanel3CrearGrupo))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtPanel3Jasper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btPanel3EditarCliente)
                        .addComponent(btPanel3EliminarCliente))
                    .addComponent(cmbPanel3Clientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btPanel3NuevoCliente)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registro de Productos", jPanel2);

        javax.swing.GroupLayout panelLogoLayout = new javax.swing.GroupLayout(panelLogo);
        panelLogo.setLayout(panelLogoLayout);
        panelLogoLayout.setHorizontalGroup(
            panelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLogoLayout.setVerticalGroup(
            panelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );

        jLabel17.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel17.setText("Copyright © 2015 J. Patricio Hijuitl Cuatlayo <patriciohc.0@gmail.com>");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("PROSID DE MEXICO S.A. de C.V.");

        jLabel19.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Version 1.0");

        jLabel20.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel20.setText("Este software es desarrollado para el control de analisis quimicos de");

        jLabel21.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel21.setText("Laboratorio de Control de Calidad de Prosid de Mexico S.A. de C.V.");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(panelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addGap(3, 3, 3)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Acerca de", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reInitComponents()
    {
/*
 *   ******************** panel1 *************
 */
        itemsAgregar = new DefaultComboBoxModel();
        fecha =  new Fecha();
        lbFecha.setText(Fecha.intToMes(fecha.getMes())+" "+fecha.getAño());
        // jcombobox utilizado para agregar materiales 
        cmbTxt = (JTextComponent)cmbEntradaAgregar.getEditor().getEditorComponent();  
        cmbTxt.addKeyListener( new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent keyEvent) 
            {
                int cod =  keyEvent.getKeyCode();
                if (cod == 37 || cod == 38 || cod == 39 || cod == 40)
                    return;
                if (cod == 10){
                    String prod = cmbEntradaAgregar.getSelectedItem().toString();
                    cmbTxt.setText(null);
                    agregarNuevoMaterial(prod);
                    return;
                }
                String prod =  cmbTxt.getText();
                itemsAgregar.removeAllElements();
                itemsAgregar.addElement(prod);
                if (!prod.equals("")) {
                    ResultSet r0 = laboratorio.prediccion(prod);
                    try {
                        while(r0.next())
                            itemsAgregar.addElement(r0.getString("NOMBRE"));     
                    } catch (SQLException ex) {
                        System.out.println("error: "+ex);
                    }
                    cmbEntradaAgregar.setModel(itemsAgregar);
                }
            }
            
            
        });
        
        //mapeoTeclas();
        tbEntrada1.setModel(dtmRegistro);
        actDtmRegistroFecha(fecha.getFechaSinDiaMySQL());  
       
        /**
         * cajas de texto utilizada para busqueda en panel 1
         */
        txtAnalisisBuscar.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyReleased(KeyEvent ke)
            {
                if (ke.getKeyChar() == '-') {
                    String fecha = txtAnalisisBuscar.getText();
                    if (fecha.length() == 5) 
                        fecha = fecha+"%-%";
                    if (fecha.length() >= 7) 
                        fecha = fecha + "%";
                    actDtmRegistroFecha(fecha);
                }
            }
        });
        
        txtAnalisisBuscar.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                String f =  txtAnalisisBuscar.getText();
                actDtmRegistroFecha(f);
            }
        });

        txtBusquedaNombre.addKeyListener(new KeyAdapter()
        {
        @Override
            public void keyReleased(KeyEvent ke)
            {
                actDtmRegistroNombre(txtBusquedaNombre.getText()+"%");
            }
        });
        
        txtRegistroFilas.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyReleased(KeyEvent ke)
            {
                actDtmRegistroNombre(txtBusquedaNombre.getText()+"%");
            }
        });
          

        tbEntrada1.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent evt)
            {
                //with key CTR you see the window, where you can introduce the results
                System.out.println(evt.getKeyCode());
                if (evt.getKeyCode() == 17 ) {
                        String id     = (String)dtmRegistro.getValueAt(
                                tbEntrada1.getSelectedRow(), 0);
                        String nombre = (String)dtmRegistro.getValueAt(
                                tbEntrada1.getSelectedRow(), 4);
                        String lote   = (String)dtmRegistro.getValueAt(
                                tbEntrada1.getSelectedRow(), 1);
                        llenarDtmAnalisis(Integer.parseInt(id), nombre, lote);
		}
                // elimina materiales de la base de datos
                if (evt.getKeyCode() == 127) {
                    int id = Integer.parseInt((String)dtmRegistro.getValueAt(
                            tbEntrada1.getSelectedRow(), 0));
                    String lote = (String)dtmRegistro.getValueAt(
                            tbEntrada1.getSelectedRow(), 1);
                    int select = JOptionPane.showConfirmDialog(thiss, 
                            "Desea eliminar el material con numero de analisis: "+id);
                    if (select != 0) 
                        return;
                    laboratorio.eliminarDato(id);
                    actDtmRegistroFecha(new Fecha(lote).getFechaSinDiaMySQL());
                }
            }
        });
        
    // opcion eliminar de menu
        JMenuItem menu1 = new JMenuItem("Eliminar..");
        popup.add(menu1);
        menu1.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                    int id = Integer.parseInt((String)dtmRegistro.getValueAt(
                            tbEntrada1.getSelectedRow(), 0));
                    String lote = (String)dtmRegistro.getValueAt(
                            tbEntrada1.getSelectedRow(), 1);
                    laboratorio.eliminarDato(id);
                    actDtmRegistroFecha(new Fecha(lote).getFechaSinDiaMySQL());
            }
        });

    // opcion modificar de menu
        menu1 =  new JMenuItem("Modificar");
        popup.add(menu1);        
        menu1.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                System.out.println("Esto en item Modificar..");
            }
        });

    //menu  utilizado para modificar o eliminar elementos de la tabla de Registro
        tbEntrada1.addMouseListener(new MouseAdapter() 
        {
            @Override
            public void mousePressed(MouseEvent e)
            {
                if (e.isPopupTrigger()) {
                    //... mostramos el menu en la ubicacion del raton
                    popup.show(e.getComponent(), e.getX(), e.getY()); 
                }
            }
        });// termina menu 
  
    // botones
       btGuardar.addActionListener(new ActionListener() {
       @Override
       public void actionPerformed(ActionEvent ae) 
       {
               try {
                   int select = 10;
                   // obtine las filas seleccionadas
                   int rows[] = tbEntrada1.getSelectedRows();
                   if (rows.length == 0  || rows.length == 1) 
                       select = JOptionPane.showConfirmDialog(
                               null, "guardar solo un elemento");
                   if (select == 1 || select == 2) return;
                   Bitacora bt = new Bitacora(prods);
                   for (int i = 0; i <rows.length; i++) {
                    //"No Analisis", "Lote", "Cantidad","Cliente/prob","Producto","Certificado"
                        try {
                            String query = null;
                            int idAnalisis = Integer.parseInt(
                                    (String)dtmRegistro.getValueAt(rows[i], 0));
                            String nombre = (String)dtmRegistro.getValueAt(
                                    rows[i], 4);
                            String lote = (String)dtmRegistro.getValueAt(
                                    rows[i], 1); //LOTE
                            String cantidad = (String)dtmRegistro.getValueAt(
                                    rows[i], 2); //CANTIDAD
                            String  cliente = (String)dtmRegistro.getValueAt(
                                    rows[i], 3);//CLIENT_PROV
                            String  certificado = (String)dtmRegistro.getValueAt(
                                    rows[i], 5);      //CERTIFICADO
                            bt.addElement(idAnalisis, prods.getProducto(nombre), 
                                    lote, cantidad, cliente, certificado, fecha);
                       
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(null, "Datos no validos");
                        }
                    }
                    bt.save(m_s.getConnection());
                    actDtmRegistroFecha(fecha.getFechaSinDiaMySQL());
               } catch (SQLException ex) {
                   Logger.getLogger(Interfaz1.class.getName()).log(
                           Level.SEVERE, null, ex);
               }
       } }); 
             
        btAnalisisAtras.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                txtBusquedaNombre.setText(null);
                fecha.decrementarMes(1);
                try {
                    int no = Integer.parseInt(txtRegistroFilas.getText());
                    actDtmRegistroFecha(fecha.getFechaSinDiaMySQL());
                } catch (NumberFormatException ex){
                    JOptionPane.showMessageDialog(null, "No de filas no validas");
                }
                lbFecha.setText(Fecha.intToMes(fecha.getMes())+" "+fecha.getAño());
            }
        });

        btAnalisisAdelante.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                txtBusquedaNombre.setText(null);
                fecha.incrementarMes(1);
                try {
                    int no = Integer.parseInt(txtRegistroFilas.getText());
                    actDtmRegistroFecha(fecha.getFechaSinDiaMySQL());
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "No de filas no validas");
                }
                lbFecha.setText(Fecha.intToMes(fecha.getMes())+" "+fecha.getAño());
            }
        });
        
        btCertificado.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // obtine las filas seleccionadas
                int rows[] = tbEntrada1.getSelectedRows();
                // obtiene direccion donde guardar los archivos
                String dir = explorarDisco();
                if (dir == null) 
                    return; // verifica si la direccion es dirferente de null
                PdfReader[] pdfs =  new PdfReader[rows.length];   
                try {
                    for (int i = 0; i <rows.length; i++) {                     
                        //obtiene el numero de certificado de la fila actual
                            int no_certificado = Integer.parseInt(
                                    (String)dtmRegistro.getValueAt(rows[i], 5));
                            String nombre = String.valueOf(
                                    (String)dtmRegistro.getValueAt(rows[i], 4));
                            JasperPrint print = laboratorio.getCertificadoNo(
                                    no_certificado,prods.getProducto(nombre)); 
                            if(print == null)return;
                            pdfs[i] = Reportes.creatPdf(print);  
                    }
                    //System.out.println(dir);
                    Reportes.concatPdf(pdfs, dir+"/certificados_"
                            +new Fecha().getFormFecha()+".pdf");
                    //Reportes.concatPdf(pdfs, dir+".pdf");
                } catch(Exception ex){}
            }
        });
        
        btReportes.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                    GenReportes rpts = new GenReportes(prods);
                    int año = fecha.getAño();
                    int mes = fecha.getMes();
                    try {
                        HashMap datospt = new HashMap();
                        HashMap datosmp = new HashMap();
                        String fecha = new Fecha(txtEmbFecha.getText()).getFecha();
                        datospt.put("fecha",fecha);
                        datosmp.put("fecha",fecha);
                        rpts.runPt(mes,año, m_s.getConnection(),datospt);
                        rpts.runMp(mes,año, m_s.getConnection(),datosmp);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(
                                Interfaz1.this, "Error al ejecuar Consulta: "+ex);
                        return;
                    }
                    JOptionPane.showMessageDialog(Interfaz1.this, "Reportes generados");
            }
        });

    /*    
        btReportes.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                genReportes.creatReports();
            }
        });
      */  
        
 //***************** panel 2 ************************************************
        javax.swing.DefaultComboBoxModel m = new javax.swing.DefaultComboBoxModel();
        int añoActual = new Fecha().getAño();
        for(int año = 2011; año <= añoActual; año++ ) {
            m.addElement(año);
        }
        ResultSet r = null;
        /*
        DefaultComboBoxModel items3 = new DefaultComboBoxModel();
        DefaultComboBoxModel items4 = new DefaultComboBoxModel();
        items4.addElement("TODOS");
        // llenado cmbRegistrosMaterial con todos los nombres que estan en la tabla
        // REGISTRO_STATIC 
        r = laboratorio.query("SELECT NOMBRE FROM REGISTRO_STATIC");  // Se obtiene todo el producto registrado
        try
        {
            while(r.next())items3.addElement(r.getString("NOMBRE")); // se agregan los nombres de los producto    
        }catch(Exception e){}
       // cmbRegistrosMaterial.setModel(items3);  // 
        
        // llenado del cmbRegistros con los datos que estan en la tabla RELACION
        r = laboratorio.query("SELECT CARACTERISTICA FROM RELACION");
        try
        {
            while(r.next())items4.addElement(r.getString("CARACTERISTICA")); // se agregan los nombres de los producto    
        }catch(Exception e){}
       // cmbRegistrosCaracteristica.setModel(items4);

        // button OK para generar registro segun los comboBox
     /*   btver.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent ae) 
            {
                reporte("","ver");
            }
        });
        
        btXls.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent ae) 
            {
                reporte(explorarDisco(),"xls");
            }
        });
        
        btPdf.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent ae) 
            {
                reporte(explorarDisco(),"pdf");
            }
        });
*/
    /*    btRegistrosOk2.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                try{
                int no_cer = Integer.parseInt(txtRegistrosCer.getText());
                //laboratorio.genCertificadoNo(no_cer,explorarDisco());
                }catch(NumberFormatException e){JOptionPane.showMessageDialog(null, "dato na valido");}
                catch(Exception ex){JOptionPane.showMessageDialog(null, "error: "+ex);}
            }
        });
    */    
    /*    btRegistrosOk3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                String material = cmbRegistrosMaterial.getSelectedItem().toString();
                String caracteristica =  cmbRegistrosCaracteristica.getSelectedItem().toString();

                HashMap resultados = laboratorio.calculos(material, caracteristica,"","");
                panelRegistrosImg.actImg((javax.swing.ImageIcon)resultados.get("histograma"));
                dtmRegistros1.setValueAt(resultados.get("promedio"), 0, 1);
                dtmRegistros1.setValueAt(resultados.get("moda"), 1, 1);
                dtmRegistros1.setValueAt(resultados.get("desviacionStd"), 2, 1);
                dtmRegistros1.setValueAt(resultados.get("rango"), 3, 1);
            }
        });
      */  
    /*    btRegistrosGuardar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String file =  explorarDisco();
                try{ 
                    //laboratorio.getCertificadoNo(Integer.parseInt(txtRegistrosCer.getText()), file);
                }
                catch(Exception ex){JOptionPane.showMessageDialog(null, "error: "+ex);
                }
            }
        });
*/
   /*     tbRegistros1.addMouseListener(new java.awt.event.MouseAdapter()
            {
                @Override
                public void mouseClicked(MouseEvent me) 
                {
                    //super.mouseClicked(me);
                    String d = null;
                    String nombre = (String) dtmRegistros1.getValueAt(tbRegistros1.getSelectedRow(), 0);
                    if(nombre.equals("Promedio")) d = ControlCalidad.promedio();
                    else if(nombre.equals("Moda")) d = ControlCalidad.moda();
                    else if(nombre.equals("Desv. Std")) d = ControlCalidad.desviacionStd();
                    else if(nombre.equals("Rango")) d = ControlCalidad.rango();
                    //txaRegistros1.setText(d);
                }
            });
     */   
        
 /*       btRegistrosOk3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if(cmbRegistrosTipoReporte.getSelectedItem().toString().equals("Reporte Individual"));
                 //   laboratorio.genRAI(cmbRegistrosProducto.getSelectedItem().toString(), txtRegistrosFecha.getText());
            }
        });
        
        tbRegistros1.setModel(dtmRegistros1); */   

        /************** panel 2 Embarques **************************************/
        /*
         *  panel Embarques
         */      
        tbEmbarques.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent evt)
            {
                // muestra ventana para llenado de analisis
                if (evt.getKeyCode() == 17) {
                        String id     = (String)dtmEmbarques1.getValueAt(
                                tbEmbarques.getSelectedRow(), 3);
                        String nombre = (String)dtmEmbarques1.getValueAt(
                                tbEmbarques.getSelectedRow(), 4);
                        String lote   = (String)dtmEmbarques1.getValueAt(
                                tbEmbarques.getSelectedRow(), 5);
                        llenarDtmAnalisis(Integer.parseInt(id), nombre, lote);
		}
                
                // elimina embarques de la base de datos
                if (evt.getKeyCode() == 127){
                    int id = Integer.parseInt((String)dtmEmbarques1.getValueAt(
                            tbEmbarques.getSelectedRow(), 0));
                    int select = JOptionPane.showConfirmDialog(
                            thiss, "Desea eliminar el embarque "+id);
                    if (select != 0) 
                        return;
                    laboratorio.eliminarEmbarque(id);
                    llenarTablaEmb();
                }

            }
        });
             
        txtEmbFecha.setText(new Fecha().toString());
        txtFilas.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) 
            {
                llenarTablaEmb();
            }
        });
       
        tbEmbarques.setModel(dtmEmbarques1);
        dtmEmbarques1.fill(laboratorio.getEmbarques(20, "TODOS", "TODOS"));
        // llenado de combobox en panel embarques
        DefaultComboBoxModel items1 = new DefaultComboBoxModel();
        DefaultComboBoxModel items2 = new DefaultComboBoxModel();
        // Se obtiene todo el producto registrado en r
        ArrayList<String> pts = prods.getPt();  
        items2.addElement("TODOS");
        for (String pt: pts) {
            items1.addElement(pt); // se agregan los nombres de los producto
            items2.addElement(pt);
        }
        
        cmbEmbarquesProducto.setModel(items1);
        cmbEmbarquesProductoB.setModel(items2);
        
        cmbEmbarquesProductoB.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent ie)
            {
                    llenarTablaEmb();
            }
        });
        
        cargarCmbClientes();
        
        cmbEmbarquesClienteB.addItemListener( new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent ie) 
            {
                // llena la tabla embarques segun los datos en los combobox
                llenarTablaEmb(); 
            }
        });
              
        btEmbarquesOk.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) 
            {
                String cliente = cmbEmbarquesCliente.getSelectedItem().toString();
                String prod = cmbEmbarquesProducto.getSelectedItem().toString();
                int cantidad;
                try {
                    cantidad = Integer.parseInt(txtEmbarquesCantidad.getText());
                } catch (NumberFormatException ex){
                    JOptionPane.showMessageDialog(thiss, "cantidad no valida"); 
                    return;
                }
                /* el metodo embarcar de LaboratorioDB calcula la cantidad que 
                se necesita de cada lote para lo requerido y guarda en la tabla 
                embarques los resultados*/
                String mensaje = laboratorio.embarcar(cliente, prod, cantidad);
                if (mensaje == null) {   
                    llenarTablaEmb();
                     txtEmbarquesCantidad.setText(null);
                } else { 
                    JOptionPane.showMessageDialog(thiss, mensaje);
                }
            }
        });
    
        btGuardarEmbarque.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                // obtine las filas seleccionadas
                int rows[] = tbEmbarques.getSelectedRows(); 
                for (int i = 0; i <rows.length; i++) {
                    //fecha, cliente, id analisis,producto,lote,cantidad
                    try{
                        String query = null;
                        int id;
                        String fecha = (String)dtmEmbarques1.getValueAt(rows[i], 1);
                        String cliente = (String)dtmEmbarques1.getValueAt(rows[i], 2);
                        String id_analisis = (String)dtmEmbarques1.getValueAt(rows[i], 3);
                        String cantidad = (String)dtmEmbarques1.getValueAt(rows[i], 6);
                        
                        try { 
                            id = Integer.parseInt(
                                    (String)dtmEmbarques1.getValueAt(rows[i], 0) );
                        } catch (NumberFormatException ex) {
                            id = 0;
                        }
                        if (id == 0) {
                            query = "INSERT INTO embarque (FECHA,CLIENTE,ID_ANALISIS, "
                                    + "CANTIDAD) VALUES ('"
                                    + fecha+"', " //FECHA
                                    + "'"+cliente+"', "  //CLIENTE
                                    + "'"+id_analisis+"', "  //ID_ANALSIS
                                    + "'"+cantidad+"', ";  //CANTICAD
                        } else {
                            query = "UPDATE embarque SET "+
                                    "FECHA = '"+fecha+"', "+
                                    "CLIENTE = '"+cliente+"', "+
                                    "ID_ANALISIS = "+id_analisis+", "+
                                    "CANTIDAD = "+cantidad+" "+
                                    "WHERE ID = "+id;
                        }
                        System.out.println(query);
                        if(laboratorio.execute(query) != 0) 
                            JOptionPane.showMessageDialog(null,"Error al guardar");
                    } catch(Exception ex) { 
                        JOptionPane.showMessageDialog(null, "Datos no validos: "+ex);
                    }
                }
                actDtmRegistroFecha(new Fecha().getFechaSinDiaMySQL());
            }
        });

        btEmbCertificados.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                 String cliente = cmbEmbarquesCliente.getSelectedItem().toString();
                 // genera los certificados del embarque que se a realizado el dia de hoy 
                 // para el cliente incicado 
                String mensaje = laboratorio.genCertificadosEmb(cliente,new Fecha(txtEmbFecha.getText()),prods);
                JOptionPane.showMessageDialog(Interfaz1.this,mensaje);
                
                 
            }
        });
        
        loadCmbProds();        
        tbGrupos.setModel(dtmGrupos);
        mostrarGrupos(null);
        cmbPanel3Prods.addItemListener( new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent ie)
            {
                String name = cmbPanel3Prods.getSelectedItem().toString();
                if (name.equals("------")) {
                    txtPanel3Cad.setText(null);
                    txtPanel3Jasper.setText(null);
                    txtPanel3Prov.setText(null);
                    txtPanel3Nombre.setText(null);
                    lbPanel3IdProducto = 0;
                    mostrarGrupos(null);
                    return;
                }
                Producto p = prods.getProducto(name);
                txtPanel3Cad.setText(String.valueOf(p.getCaducidad()));
                txtPanel3Jasper.setText(p.getFileJasper());
                txtPanel3Prov.setText(p.getClienteProveedor());
                txtPanel3Nombre.setText(name);
                lbPanel3IdProducto = p.getId();
                if (p.getTipo().equals("PT")) {
                    cmbPanel3Tipo.setSelectedIndex(0);
                } else if (p.getTipo().equals("MP")) { 
                    cmbPanel3Tipo.setSelectedIndex(1);
                } else {
                    cmbPanel3Tipo.setSelectedIndex(2);
                }
                mostrarGrupos(p.getGrupos());
            }
        });
        
        btPanel3NuevoProducto.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                Producto p =  getDataProducts();
                if ( p == null) return ;
                try {
                    p.save(m_s.getConnection());
                    loadProds();
                    loadCmbProds();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(
                            Interfaz1.this, "Error al guardar en base de datos: "+ex);
                    Logger.getLogger(
                            Interfaz1.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
                JOptionPane.showMessageDialog(
                        Interfaz1.this, "Se guardo correctamente!");
            }
        });
        
        btPanel3Actualizar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(cmbPanel3Prods.getSelectedItem().toString().equals("------")){
                    JOptionPane.showMessageDialog(
                            Interfaz1.this, "Debe seleccionar un producto");
                    return;
                }
                Producto p =  getDataProducts();
                if ( p == null) return ;
                try {
                    p.update(m_s.getConnection());
                    loadProds();
                    loadCmbProds();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(
                            Interfaz1.this, "Error al guardar en base de datos: "+ex);
                    Logger.getLogger(
                            Interfaz1.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
                JOptionPane.showMessageDialog(
                        Interfaz1.this, "Se actualizo conrrectamente");
            }
        });
        
        btPanel3Eliminar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(cmbPanel3Prods.getSelectedItem().toString().equals("------")){
                    JOptionPane.showMessageDialog(
                            Interfaz1.this, "Debe seleccionar un producto");
                    return;
                }
                Producto p =  getDataProducts();
                if ( p == null){
                    JOptionPane.showMessageDialog(
                            Interfaz1.this, "Los datos proporcionados no son correctos");
                    return ;
                }
                try {
                    if (JOptionPane.showConfirmDialog(Interfaz1.this, 
                            "Esta seguro que quiere eliminar el producto: "
                            + p.getNombre()) != 0)
                        return;
                    if (!p.delete(m_s.getConnection())) {
                        JOptionPane.showMessageDialog(Interfaz1.this, 
                                "Verifique que no existan registros con este nombre\n "
                              + "ó compruebe que el gestor de base de datos funcione correctamente!");
                        return;                        
                    }
                    loadProds();
                    loadCmbProds();
                } catch (Exception ex) {
                    Logger.getLogger(Interfaz1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        btPanel3CrearGrupo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) 
            {
                Pattern pat = Pattern.compile("[A-Za-z1-9\\s]+");
                String nombreGrupo = JOptionPane.showInputDialog(Interfaz1.this, 
                        "Introduzca el nombre para el nuevo grupo de analisis");
                if (nombreGrupo == null) 
                    return;
                Matcher mat = pat.matcher(nombreGrupo);
                if (nombreGrupo.equals("") || !mat.matches()) {
                    JOptionPane.showMessageDialog(Interfaz1.this,
                        "!El nombre del grupo solo puede contener espacios, letras o numeros!");
                    return;
                }
                String nombreElementos = JOptionPane.showInputDialog(Interfaz1.this,
                        "Introduzca los nombres de los elementos a incluir en este nuevo grupo,\n"
                      + "separados por espacios  ");
                if (nombreElementos == null || nombreElementos.equals(""))
                    return;
                String[]  str = nombreElementos.split(" ");      
                ArrayList<String> elementos = new ArrayList<String>();
                pat = Pattern.compile("[A-Za-z1-9]+");
                for (String str1 : str) {
                    mat = pat.matcher(str1);
                    if (mat.matches()) { 
                        elementos.add(str1);
                    } else {
                        JOptionPane.showMessageDialog(Interfaz1.this,
                            "!El nombre de los elementos solo puede contener letras o numeros!");
                        return;       
                    }
                }
                try{
                    new Grupo(nombreGrupo.toUpperCase(),elementos).save(m_s.getConnection());
                } catch (SQLException ex){
                    JOptionPane.showMessageDialog(Interfaz1.this,
                                        "Error al guardar grupo en base de datos: "+ex);
                    return;
                }
                JOptionPane.showMessageDialog(Interfaz1.this,
                                        "El grupo se guardo con exito!");
                cmbPanel3Prods.setSelectedIndex(0);
                mostrarGrupos(null);
                                
            }
        });
               
        tbGrupos.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent evt)
            {
                // elimina grupo de la base de datos
                if(evt.getKeyCode() == 127)
                {
                    try {
                        String nombre = (String)dtmGrupos.getValueAt(
                                tbGrupos.getSelectedRow(), 0);
                        int select = JOptionPane.showConfirmDialog(
                                thiss, "Desea eliminar el grupo con nombre: "+nombre);
                        if (select != 0) 
                            return;
                        if (!(new Grupo(nombre).delete(m_s.getConnection()))) {
                            JOptionPane.showMessageDialog(
                                    Interfaz1.this, "No se puedo eliminar el grupo\n"
                                    + "Verifique que no haya productos incluidos en este grupo");
                        }
                        mostrarGrupos(null);
                    } catch (SQLException ex) {
                    }
                }
            }
        });
        
        btPanel3AnalisisTipicos.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                frAnalisisTipicos.mostrar(prods.getNombres());
            }
        });
        
        btPanel3EditarCliente.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) 
            {
                String nnombre  = JOptionPane.showInputDialog(
                        Interfaz1.this, "nuevo nombre");
                String nombre = cmbPanel3Clientes.getSelectedItem().toString();
                try {
                    Clientes.update(nombre,nnombre, m_s.getConnection());
                    cargarCmbClientes();
                } catch (SQLException ex) {
                    Logger.getLogger(Interfaz1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        btPanel3EliminarCliente.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                String nombre = cmbPanel3Clientes.getSelectedItem().toString();
                try {
                    Clientes.delete(nombre, m_s.getConnection());
                    cargarCmbClientes();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(Interfaz1.this, "No se pudo eliminar el cliente\n"
                            + "Asegurese de que no hay embarques con el nombre de este cliente");
                }
            }
        });
        
        btPanel3NuevoCliente.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) 
            {
                String nombre  = JOptionPane.showInputDialog(Interfaz1.this, "nuevo cliente");
                if (nombre == null)
                    return;
                try {
                    Clientes.nuevoCliente(nombre, m_s.getConnection());
                    cargarCmbClientes();
                } catch (SQLException ex) {
                    Logger.getLogger(Interfaz1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    } // fin reIniComponets
    
    private void cargarCmbClientes()
    {
        DefaultComboBoxModel items1 = new DefaultComboBoxModel();
        DefaultComboBoxModel items2 = new DefaultComboBoxModel();
        ResultSet r = null;
        try {
            r = Clientes.getClientes(m_s.getConnection());  // se obtine el nombre de los cliente registrados
        } catch (SQLException ex) {
            Logger.getLogger(Interfaz1.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        items2.addElement("TODOS");
        try { 
            while(r.next()) { 
                items1.addElement(r.getString("NOMBRE"));
                items2.addElement(r.getString("NOMBRE"));
            }
        } catch(Exception e){}
        cmbEmbarquesCliente.setModel(items1);
        cmbEmbarquesClienteB.setModel(items2); // termina llenado de combobox
        cmbPanel3Clientes.setModel(items1); // cmb de panel 3 
    }
    
    private void loadCmbProds()
    {
        DefaultComboBoxModel item3 = new DefaultComboBoxModel();
        String[] nameProds =  prods.getNombres();
        item3.addElement("------");
        for(int i = 0; i<nameProds.length; i++) {
            item3.addElement(nameProds[i]);
        }
        cmbPanel3Prods.setModel(item3);
        txtPanel3Cad.setText(null);
        txtPanel3Jasper.setText(null);
        txtPanel3Prov.setText(null);
        txtPanel3Nombre.setText(null);
        lbPanel3IdProducto = 0;
        mostrarGrupos(null);
    }
    
    private Producto getDataProducts()
    {
        String nombre = txtPanel3Nombre.getText().trim();
        if (nombre.equals("")) {
            JOptionPane.showMessageDialog(
                    Interfaz1.this, "De un nombre al producto o seleccione uno");
            return null;
        }
        String tipo = cmbPanel3Tipo.getSelectedItem().toString();
        if (tipo.endsWith("PRODUCTO TERMINADO")) { 
            tipo = "PT";
        } else if (tipo.endsWith("MATERIA PRIMA")) {
            tipo = "MP";
        } else {
            tipo = "ES";
        }
        
        String cliente_proveedor = txtPanel3Prov.getText();
        String fileJasper = txtPanel3Jasper.getText();
        int caducidad;
        try {
            caducidad = Integer.parseInt(txtPanel3Cad.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,
            "La caducudad debe ser un numero entero que representa la cantidad de meses.");
            return null;
        }
        String incluir;
        ArrayList<String> grupos = new ArrayList<String>();
        int noGrupos = dtmGrupos.getRowCount();
        for (int i = 0; i<noGrupos; i++) {
            incluir =  dtmGrupos.getValueAt(i, 1).toString().trim();    
            if (incluir.equalsIgnoreCase("s")) {
                //System.out.println("INCLUYENDO ... "+incluir);
                grupos.add( (String)dtmGrupos.getValueAt(i, 0) );
            }
        }
        return new Producto(lbPanel3IdProducto,
                            nombre, 
                            cliente_proveedor,
                            tipo, 
                            caducidad, 
                            grupos,
                            fileJasper);
    }
    
    private void agregarNuevoMaterial(String nombre)
    {
	Producto p = prods.getProducto(nombre);
        //"No Analisis", "Lote", "Cantidad","Cliente/prob","Producto","Certificado"
        String []newFila = new String[6]; 
        //try{
        if (p != null) {
            /* verifica si en la tabla registro hay datos,
             si no los hay toma el analisis y certificado de la consulta,
            si los hay entonces toma idAnalisis y no de cerificado de la tabla*/
            String tipo = p.getTipo();
            if (dtmRegistro.getRowCount() == 0) {
                // analisis predictivo
                newFila[0] = String.valueOf(laboratorio.sgtNoAnalisis());
                if(tipo.equals("PT"))
                    // certificado predictivo
                    newFila[5] = String.valueOf(laboratorio.sgtNoCertificado());
            } else {
                int ultimoId = Integer.parseInt(
                (String)dtmRegistro.getValueAt(dtmRegistro.getRowCount()-1, 0)) + 1;
                newFila[0] = String.valueOf(ultimoId); // analisis predictivo
                if (tipo.equals("PT")) {
                    int ultimoCer;
                    try {
                        ultimoCer = Integer.parseInt(
                            (String)dtmRegistro.getValueAt(
                                    dtmRegistro.getRowCount()-1, 5)) + 1;
                        newFila[5] = String.valueOf(ultimoCer); // certificado predictivo
                        // en caso de que la ultima fila no tenga numero de certificado
                    } catch (Exception e) { 
                        newFila[5] = String.valueOf(laboratorio.sgtNoCertificado());
                    }                        
                }   
            }
            newFila[3] = p.getClienteProveedor();
            newFila[4] = p.getNombre();
            dtmRegistro.addRow(newFila);
        } else { 
            JOptionPane.showMessageDialog(thiss, "El material no existe");
        }   		
    }

    private void llenarTablaEmb()
    {
        dtmEmbarques1.clear();
        dtmEmbarques1.fill(
                            laboratorio.getEmbarques(
                                Integer.parseInt( (String)txtFilas.getText() ),
                                cmbEmbarquesProductoB.getSelectedItem().toString(),
                                cmbEmbarquesClienteB.getSelectedItem().toString())
                          );
    }
    
    public void okAnalisis(String idAnalisis, String nombre)
    {
        if(!idAnalisis.equals("")) {
            HashMap datos = new HashMap();
            for (int i = 0; i < dtmAnalisis1.getRowCount(); i++) {
                Object analisis = dtmAnalisis1.getValueAt(i, 1);
                if (analisis == null  || analisis.equals(""))
                    analisis = "null";
                datos.put(dtmAnalisis1.getValueAt(i, 0),analisis);
                //dtmAnalisis1.setValueAt(null, i, 1);
            }
            laboratorio.setAnalisis(
                Integer.parseInt(idAnalisis), prods.getProducto(nombre), datos);
        }
    }
    
    public void sgtAnalisisEnDtm(int idAnalisis)
    {
        int size = tbEntrada1.getRowCount();
        if (size == 0) return;
        int pos =  tbEntrada1.getSelectedRow()+1;
        if(pos >= size) pos = 0;
        String id = (String)dtmRegistro.getValueAt(pos, 0);
        String nombre = (String)dtmRegistro.getValueAt(pos, 4);
        String lote = (String)dtmRegistro.getValueAt(pos, 1);
        llenarDtmAnalisis(Integer.parseInt(id), nombre, lote);
        frDatos.mostrar(String.valueOf(id), nombre, lote);
        tbEntrada1.changeSelection(pos, 0, false, false);           
    }
    
    public void antAnalisisEnDtm(int idAnalisis)
    {
        int size = tbEntrada1.getRowCount();
        if (size == 0) return;
        int pos =  tbEntrada1.getSelectedRow()-1;
        if(pos < 0) pos = size-1;
        String id = (String)dtmRegistro.getValueAt(pos, 0);
        String nombre = (String)dtmRegistro.getValueAt(pos, 4);
        String lote = (String)dtmRegistro.getValueAt(pos, 1);
        llenarDtmAnalisis(Integer.parseInt(id), nombre, lote);
        frDatos.mostrar(String.valueOf(id), nombre, lote);
        tbEntrada1.changeSelection(pos, 0, false, false);           
    }
    
    public void llenarDtmAnalisis(int idAnalisis,String nombre,String lote)
    {
        try {
            // obtiene todas las tablas en las que se encuentra el producto
            ArrayList<Grupo> grps = prods.getProducto(nombre).getGrupos();
            if (grps == null) {
                JOptionPane.showMessageDialog(null, "El nombre de producto no existe ");
            }
            dtmAnalisis1.clear();
            for(Grupo g: grps) {
                String tabla = g.getTabla();
                ArrayList<String> analisis =  g.getAnalisis();
                ResultSet rs1 = laboratorio.getAnalisis(idAnalisis, tabla, analisis);
                dtmAnalisis1.fill(rs1);
            }
            frDatos.mostrar(String.valueOf(idAnalisis), nombre, lote);
         } catch(Exception e){
             JOptionPane.showMessageDialog(null, "error: "+e);
         }
    }
  
    private void mostrarGrupos(ArrayList<Grupo> grupos) {   
        dtmGrupos.clear();
        java.sql.ResultSet rs = laboratorio.query("SELECT NOMBRE FROM grupos");
        String nuevaFila[]  = new String[2];
        try {
            if (grupos != null) {
                while(rs.next()) {
                    nuevaFila[0] = rs.getString("NOMBRE");
                    nuevaFila[1] = "n";
                    for (Grupo g: grupos) {
                        if (nuevaFila[0].equals(g.getNombre())) {
                            nuevaFila[1] = "s";
                            break;
                        }
                    }
                    dtmGrupos.addRow(nuevaFila);
                }
            } else {
                while (rs.next()) {
                    nuevaFila[0] = rs.getString("NOMBRE");
                    nuevaFila[1] = "n";
                    dtmGrupos.addRow(nuevaFila);
                }    
            }   
        } catch (Exception ex) {
            System.out.println("error en frame "+ex);
        }
    }
       
/*Pone en el registroDtm los productos registrados con la fecha recibida*/
    private void actDtmRegistroFecha(String f)
    {
            dtmRegistro.clear(); 
            java.sql.ResultSet rs = laboratorio.getRegistrosFecha(f);
            String nuevaFila[]  = new String[6];
            try {
                while(rs.next()) {
                    for(int i = 0; i < 6; i++)
                        nuevaFila[i] = rs.getString(i+1);
                    dtmRegistro.addRow(nuevaFila);
                }
            } catch (SQLException ex) {
                System.out.println("error en frame "+ex);
            }
    }
    
    /*Pone en el registroDtm los productos registrados con el nombre recibido*/
    private void actDtmRegistroNombre(String nombre)
    {
            dtmRegistro.clear(); 
            int n = Integer.parseInt(txtRegistroFilas.getText());
            java.sql.ResultSet rs = laboratorio.getRegistrosNombre(nombre,n);
            String nuevaFila[]  = new String[6];
            try {
                while(rs.next()) {
                    for(int i = 0; i < 6; i++)
                        nuevaFila[i] = rs.getString(i+1);
                    dtmRegistro.addRow(nuevaFila);
                }
            } catch (SQLException ex) {
                System.out.println("error en frame "+ex);
            }
    }

    public TablaAnalisis getDtmAnalisis1()
    {
        return dtmAnalisis1;
    }
    
    public String explorarDisco()
    {
	JFileChooser chDir = new JFileChooser();
	//chArchivo.setCurrentDirectory(new File(".")); //directorio actual
        chDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        //new File(".").getPath();
	int retval = chDir.showSaveDialog(null);
        //chArchivo.showSaveDialog();
   	//en retval regresa el boton que se oprimio:ok o cancelar
	if (retval == JFileChooser.APPROVE_OPTION) {
            File archivo = chDir.getSelectedFile();
            if (archivo != null) {
		return (archivo.getPath());
            }
	} else if (retval == JFileChooser.CANCEL_OPTION) {
            return null;
        } else if (retval == JFileChooser.ERROR_OPTION) {
           //JOptionPane.showMessageDialog(frame, "El archivo no fue seleccionado", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            //JOptionPane.showMessageDialog(frame, "Ocurrio una operaci�n desconocida.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
	return null;
    }
    
    public LaboratorioDB getLaboratorio()
    {
	return laboratorio;
    }
    // mapeo de combinacion de teclas
    private void mapeoTeclas() 
    {
        ActionMap mapaAccion = jTabbedPane1.getActionMap();
        InputMap map = jTabbedPane1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        // CTRL + S
        KeyStroke ctrl_b = KeyStroke.getKeyStroke(KeyEvent.VK_B,Event.CTRL_MASK, true);
        // CTRL + A
        //KeyStroke ctrl_a = KeyStroke.getKeyStroke(KeyEvent.VK_A,Event.CTRL_MASK, true);
        
        //Key Actions
        //map.put(ctrl_b , "accion_ctrl_b");
        //mapaAccion.put("accion_ctrl_b",accion_CTRLB());

        //map.put(ctrl_a , "accion_ctrl_a");
        //mapaAccion.put("accion_ctrl_a",Accion_CTRLA());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPanel3;
    private javax.swing.JButton btAnalisisAdelante;
    private javax.swing.JButton btAnalisisAtras;
    private javax.swing.JButton btCertificado;
    private javax.swing.JButton btEmbCertificados;
    private javax.swing.JButton btEmbarquesOk;
    private javax.swing.JButton btGuardar;
    private javax.swing.JButton btGuardarEmbarque;
    private javax.swing.JButton btPanel3Actualizar;
    private javax.swing.JButton btPanel3AnalisisTipicos;
    private javax.swing.JButton btPanel3CrearGrupo;
    private javax.swing.JButton btPanel3EditarCliente;
    private javax.swing.JButton btPanel3Eliminar;
    private javax.swing.JButton btPanel3EliminarCliente;
    private javax.swing.JButton btPanel3NuevoCliente;
    private javax.swing.JButton btPanel3NuevoProducto;
    private javax.swing.JButton btReportes;
    private javax.swing.JComboBox cmbEmbarquesCliente;
    private javax.swing.JComboBox cmbEmbarquesClienteB;
    private javax.swing.JComboBox cmbEmbarquesProducto;
    private javax.swing.JComboBox cmbEmbarquesProductoB;
    private javax.swing.JComboBox cmbEntradaAgregar;
    private javax.swing.JComboBox cmbPanel3Clientes;
    private javax.swing.JComboBox cmbPanel3Prods;
    private javax.swing.JComboBox cmbPanel3Tipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbFecha;
    private javax.swing.JPanel panelLogo;
    private javax.swing.JTable tbEmbarques;
    private javax.swing.JTable tbEntrada1;
    private javax.swing.JTable tbGrupos;
    private javax.swing.JTextField txtAnalisisBuscar;
    private javax.swing.JTextField txtBusquedaNombre;
    private javax.swing.JTextField txtEmbFecha;
    private javax.swing.JTextField txtEmbarquesCantidad;
    private javax.swing.JTextField txtFilas;
    private javax.swing.JTextField txtPanel3Cad;
    private javax.swing.JTextField txtPanel3Jasper;
    private javax.swing.JTextField txtPanel3Nombre;
    private javax.swing.JTextField txtPanel3Prov;
    private javax.swing.JTextField txtRegistroFilas;
    // End of variables declaration//GEN-END:variables
    private int lbPanel3IdProducto;
    //private Java2sAutoTextField txtPredictivo
}


